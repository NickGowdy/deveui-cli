package main

import (
	"context"
	"fmt"
	"log"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"

	"github.com/NickGowdy/deveui-cli/client"
	"github.com/NickGowdy/deveui-cli/device"
	"github.com/NickGowdy/deveui-cli/processor"
	"github.com/joho/godotenv"
)

const (
	MaxConcurrentJobs     = /* Buffer limit for channel */ 10
	CodeRegistrationLimit = /* Maximum number of devices that will be registered */ 100
	TIMEOUT               = /* Milliseconds */ 30000
)

/*
deveui-cli is a Go CLI program.
It is used for concurrently generating unique 16-character (hex) identifier called a DevEUI.
These are generated by the program and registered via an external (LoRaWAN) API.

Usage:

	go run main.go (locally)

	go run deveui-cli (docker)

Once this program starts, it will listen to syscall.SIGTERM, syscall.SIGINT via a channel.
This is to handle any unexpected terminations of the program and to resume processing DevEUIs.
*/
func main() {
	godotenv.Load(".env")
	baseurl := os.Getenv("BASE_URL")

	// setup client for requests
	httpClient := &http.Client{
		Timeout: time.Second * TIMEOUT,
	}

	loraWAN := client.NewLoraWAN(baseurl, httpClient)

	// setup processor to do work
	codeProcessor := &processor.CodeProcessor{
		CodeRegistrationLimit: CodeRegistrationLimit,
		MaxConcurrentJobs:     MaxConcurrentJobs,
		LoraWAN:               *loraWAN,
		Device:                make(chan device.Device),
	}

	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()

	work := make(chan struct{}, MaxConcurrentJobs)
	listener := make(chan os.Signal, 1)

	// goroutine to listen for syscall.SIGINT
	go func() {
		signal.Notify(listener, syscall.SIGINT)
		go func() {
			for {
				time.Sleep(1000)
			}
		}()
		sig := <-listener
		log.Printf("Caught signal %v", sig)
	}()

	// Fill work buffer so we can start processing work
	go func() {
		for {
			work <- struct{}{}
		}
	}()

	// Spawn workers
	for job := 0; job < MaxConcurrentJobs; job++ {
		go codeProcessor.Worker(ctx, work)
	}

	// stdout any registered devices and increment until CODE_REGISTRATION_LIMIT is reached.
	count := 0
	for d := range codeProcessor.Device {
		fmt.Printf("device: %d has identifier: %s and code: %s\n", count+1, d.Identifier, d.Code)
		count += 1
		if count == CodeRegistrationLimit {
			break
		}
	}
}
