package main

import (
	"context"
	"net/http"
	"os"
	"strconv"
	"time"

	"github.com/NickGowdy/deveui-cli/client"
	"github.com/NickGowdy/deveui-cli/device"
	"github.com/NickGowdy/deveui-cli/processor"
	"github.com/joho/godotenv"
)

/*
deveui-cli is a Go CLI program.
It is used for concurrently generating unique 16-character (hex) identifier called a DevEUI.
These are generated by the program and registered via an external (LoRaWAN) API.

Usage:

	go run main.go (locally)

	go run deveui-cli (docker)

Once this program starts, it will listen to syscall.SIGTERM, syscall.SIGINT via a channel.
This is to handle any unexpected terminations of the program and to resume processing DevEUIs.
*/
func main() {
	if err := godotenv.Load(".env"); err != nil {
		panic("error loading.env file")
	}
	godotenv.Load(".env")
	baseurl := os.Getenv("BASE_URL")

	maxConcurrentJobs, err := strconv.Atoi(os.Getenv("MAX_CONCURRENT_JOBS"))
	if err != nil {
		panic("error parsing MAX_CONCURRENT_JOBS to int")
	}

	codeRegistrationLimit, err := strconv.Atoi(os.Getenv("CODE_REGISTRATION_LIMIT"))
	if err != nil {
		panic("error parsing CODE_REGISTRATION_LIMIT to int")
	}

	timeout, err := strconv.Atoi(os.Getenv("TIMEOUT"))
	if err != nil {
		panic("error parsing TIMEOUT to int")
	}

	// setup client for requests
	httpClient := &http.Client{
		Timeout: time.Second * time.Duration(timeout),
	}

	loraWAN := client.NewLoraWAN(baseurl, httpClient)

	// setup processor to do work
	codeProcessor := &processor.CodeProcessor{
		CodeRegistrationLimit: codeRegistrationLimit,
		MaxConcurrentJobs:     maxConcurrentJobs,
		LoraWAN:               *loraWAN,
		Device:                make(chan device.Device),
	}

	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()

	work := make(chan struct{}, maxConcurrentJobs)

	// Fill work buffer so we can start processing work
	go func() {
		for {
			work <- struct{}{}
		}
	}()

	// Spawn workers
	for job := 0; job < maxConcurrentJobs; job++ {
		go codeProcessor.Worker(ctx, work)
	}

	// stdout any registered devices and increment until CODE_REGISTRATION_LIMIT is reached.
	count := 0
	for device := range codeProcessor.Device {
		device.Print(count)
		count++
		if count == codeRegistrationLimit {
			break
		}
	}
}
