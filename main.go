package main

import (
	"context"
	"net/http"
	"os"
	"strconv"
	"time"

	"github.com/NickGowdy/deveui-cli/client"
	"github.com/NickGowdy/deveui-cli/processor"
	"github.com/joho/godotenv"
)

/*
deveui-cli is a Go CLI program.
It is used for concurrently generating unique 16-character (hex) identifier called a DevEUI.
These are generated by the program and registered via an external (LoRaWAN) API.

Usage:

	go run main.go (locally)

	go run deveui-cli (docker)

Once this program starts, it will listen to syscall.SIGTERM, syscall.SIGINT via a channel.
This is to handle any unexpected terminations of the program and to resume processing DevEUIs.
*/
func main() {
	if err := godotenv.Load(".env"); err != nil {
		panic("error loading.env file")
	}

	baseurl := os.Getenv("BASE_URL")

	maxConcurrentJobs, err := strconv.Atoi(os.Getenv("MAX_CONCURRENT_JOBS"))
	if err != nil {
		panic("error parsing MAX_CONCURRENT_JOBS to int")
	}

	codeRegistrationLimit, err := strconv.Atoi(os.Getenv("CODE_REGISTRATION_LIMIT"))
	if err != nil {
		panic("error parsing CODE_REGISTRATION_LIMIT to int")
	}

	timeout, err := strconv.Atoi(os.Getenv("TIMEOUT"))
	if err != nil {
		panic("error parsing TIMEOUT to int")
	}

	// setup client for requests
	httpClient := &http.Client{
		Timeout: time.Second * time.Duration(timeout),
	}

	loraWAN := client.NewLoraWAN(baseurl, httpClient)

	// setup processor to do work
	codeProcessor := &processor.CodeProcessor{
		CodeRegistrationLimit: codeRegistrationLimit,
		MaxConcurrentJobs:     maxConcurrentJobs,
		LoraWAN:               *loraWAN,
	}

	ctx, cancel := context.WithCancel(context.Background())

	codeProcessor.Start(ctx, cancel)
}
